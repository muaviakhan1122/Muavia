console.log("✅ version.js loaded");

class VersionControl {
  constructor(app) {
    this.app = app;
    this.versionHistory = [];
    this.loadVersionHistory();

    // Global fail-safe rollback
    window.addEventListener('error', (e) => {
      console.error("❗ Uncaught error detected:", e.message);
      this.rollbackToPreviousVersion();
    });
  }

  createVersion(update) {
    const newVersion = this.incrementVersion(this.app.state.currentVersion);
    const versionData = {
      version: newVersion,
      date: new Date().toISOString(),
      changes: Array.isArray(update.description) ? update.description : [update.description],
      stateSnapshot: JSON.stringify(this.app.state)
    };

    this.versionHistory.push(versionData);
    this.saveVersionHistory();
    this.app.state.currentVersion = newVersion;
    this.app.saveState();

    console.log(`🆕 Created version: ${newVersion}`);
    return newVersion;
  }

  rollbackToPreviousVersion() {
    if (this.versionHistory.length < 2) {
      console.warn("⛔ No previous version to roll back to.");
      return;
    }

    const previous = this.versionHistory[this.versionHistory.length - 2];
    this.app.state = JSON.parse(previous.stateSnapshot);
    this.app.state.currentVersion = previous.version;
    this.saveVersionHistory();
    this.app.saveState();

    console.log(`↩️ Rolled back to version: ${previous.version}`);
  }

  incrementVersion(current) {
    const [major, minor, patch] = current.split('.').map(Number);
    return `${major}.${minor}.${patch + 1}`;
  }

  loadVersionHistory() {
    const saved = localStorage.getItem('orionVersionHistory');
    if (saved) this.versionHistory = JSON.parse(saved);
  }

  saveVersionHistory() {
    localStorage.setItem('orionVersionHistory', JSON.stringify(this.versionHistory));
  }

  getCurrentVersion() {
    return this.app.state.currentVersion;
  }

  getVersionHistory() {
    return this.versionHistory;
  }

  logAllVersions() {
    console.log("🗂️ Version History:");
    this.versionHistory.forEach(v => {
      console.log(`🔹 v${v.version} - ${v.date}\n   ↪️ ${v.changes.join('\n   ↪️ ')}`);
    });
  }

  // 🧠 This is the final piece: dynamic module integration
  applyFeatureModule(code, description = "Autogenerated feature") {
    try {
      // Snapshot state before applying anything
      this.createVersion({ description: `Snapshot before applying ${description}` });

      const script = document.createElement('script');
      script.textContent = code;
      document.body.appendChild(script);

      const newVer = this.createVersion({ description });
      console.log(`✅ Applied feature module & created version: ${newVer}`);
    } catch (e) {
      console.error("❌ Failed to apply feature module:", e.message);
      this.rollbackToPreviousVersion();
    }
  }
}
